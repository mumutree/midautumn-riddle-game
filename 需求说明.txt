# 中秋猜谜语游戏需求说明书

## 项目概述
开发一个以中秋节为主题的在线猜谜语游戏，用户可以通过输入用户名参与游戏，猜解灯谜并查看实时排行榜。

## ⚠️ 安全要求（最高优先级）

### 1. 数据库配置安全
- **严禁在前端代码中硬编码任何数据库密钥或敏感信息**
- **严禁将包含真实密钥的配置文件提交到版本控制系统**
- 生产环境必须使用服务端API方式获取配置信息
- 开发环境可使用本地配置文件，但必须在.gitignore中排除

### 2. 配置文件管理
- `config.js` - 本地开发配置（已加入.gitignore，不上传）
- `config.example.js` - 配置模板文件（可上传，不含真实密钥）
- `api/config.js` - 服务端API配置端点（生产环境使用）
- `vercel.json` - 部署配置文件

### 3. 环境变量安全
- 生产环境密钥存储在Vercel环境变量中
- 前端通过API端点安全获取配置
- 本地开发环境降级处理，仅限localhost访问

### 4. 代码审查要求
- 每次提交前必须检查是否包含敏感信息
- 禁止在任何前端可访问的文件中暴露真实密钥
- 定期审查配置文件和环境变量设置

## 功能需求

### 1. 用户登录模块
- 用户需要输入用户名才能开始游戏
- 用户名不能与之前输入的用户重复
- 如果用户名重复，显示提示信息要求重新输入
- 无需注册，仅需用户名即可开始游戏

### 2. 游戏界面设计
#### 2.1 整体风格
- 主色调：红色和黄色
- 页面标题："中秋灯谜"

#### 2.2 灯笼设计
- 大红灯笼作为主要视觉元素
- 灯笼结构：
  - 主体：红色圆形
  - 装饰：上下各有一个黄色装饰条
  - 悬挂线：上下各有红线，下方红线较粗
- 灯笼主体显示谜题内容
- 遇标点符号自动换行
- 谜题下方显示"打XXX"提示

#### 2.3 对联设计
- 灯笼左侧对联：上联"猜谜庆中秋"
- 灯笼右侧对联：下联"解谜贺国庆"

### 3. 游戏交互功能
#### 3.1 答题界面
- 灯笼下方设置答案输入框
- 三个操作按钮：
  - 提交答案（支持回车键快捷提交）
  - 显示答案
  - 跳过这题

#### 3.2 答题反馈
- 答对效果：
  - 页面显示大量烟花动画
  - 播放庆祝音效
- 答错处理：
  - 提供选择：再次作答或显示答案

### 4. 排行榜系统
#### 4.1 排序规则
- 按用户答对题目数量排序（多的在上）
- 相同数量时，按答题时间排序（先答题者在上）
- 实时更新排名

#### 4.2 显示特性
- 当前用户信息用特殊颜色标识，与其他用户区分
- 根据在线用户答题情况实时调整排名位置

## 技术要求

### 1. 技术实现方案
- **核心技术栈**：HTML + CSS + JavaScript（原生JS）
- **文件结构**：尽量保持精简，减少文件数量
- **实现方式**：
  - 单页面应用（SPA）
  - 所有功能集成在一个HTML文件中
  - CSS样式内嵌或使用单独的CSS文件
  - JavaScript逻辑尽量精简高效

### 2. 前端技术细节
- **响应式设计**：使用CSS媒体查询适配不同设备
- **动画效果**：
  - CSS3动画实现烟花庆祝效果
  - CSS transition实现平滑过渡
- **音效支持**：HTML5 Audio API播放庆祝音效
- **实时数据更新**：JavaScript实现排行榜实时刷新

### 3. 数据存储方案
#### 3.1 本地存储（开发阶段）
- **存储方式**：使用localStorage存储用户数据
- **数据结构**：
  - 用户名列表（去重验证）
  - 用户答题记录
  - 实时排行榜数据
  - 内置谜题库（JavaScript数组）

#### 3.2 线上部署数据处理方案（最终确定）
**采用方案：Supabase实时数据库**
- 基于PostgreSQL的实时数据库
- 内置实时订阅功能
- 免费额度：500MB数据库 + 2GB带宽
- 支持行级安全策略（RLS）
- **实时排名实现**：
  - 用户答题后立即更新数据库
  - 使用Supabase Realtime监听数据变化
  - 所有在线用户实时看到排名变化
  - 支持并发用户同时游戏

**数据表结构**：
```sql
-- 用户表
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username VARCHAR(50) UNIQUE NOT NULL,
  score INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT NOW(),
  last_active TIMESTAMP DEFAULT NOW(),
  current_question INTEGER DEFAULT 1
);

-- 答题记录表（可选）
CREATE TABLE user_answers (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  question_id INTEGER,
  is_correct BOOLEAN,
  answered_at TIMESTAMP DEFAULT NOW()
);
```

#### 3.3 多用户在线排名技术实现
**实时数据同步方案**：
1. **Supabase Realtime方案**（推荐）：
   ```javascript
   // 订阅用户表变化
   const subscription = supabase
     .channel('users-channel')
     .on('postgres_changes', 
       { event: '*', schema: 'public', table: 'users' },
       (payload) => {
         console.log('用户数据变化:', payload);
         updateLeaderboard(); // 实时更新排行榜
       }
     )
     .subscribe();
   
   // 获取排行榜数据
   const { data: leaderboard } = await supabase
     .from('users')
     .select('username, score, created_at')
     .order('score', { ascending: false })
     .order('created_at', { ascending: true });
   ```

2. **Firebase方案**（备选）：
   - 监听数据库变化：`database.ref('users').on('value', callback)`
   - 自动推送排名更新到所有客户端
   - 客户端实时重新渲染排行榜

3. **轮询方案**（兼容性好）：
   - 每5-10秒请求一次排行榜API
   - 比较数据变化，更新界面
   - 适合用户量不大的场景

4. **WebSocket方案**（高级）：
   - 建立WebSocket连接
   - 服务端主动推送排名变化
   - 实时性最好，但实现复杂

**用户体验优化**：
- **当前用户高亮**：在排行榜中特殊标识当前用户
- **排名变化动画**：用户排名上升/下降时显示动画效果
- **实时通知**：其他用户答题时显示"XXX刚刚答对了一题"
- **在线状态**：显示用户是否在线（最后活跃时间）

#### 3.3 数据隐私和安全
- **用户名规则**：
  - 不收集真实姓名或敏感信息
  - 仅使用昵称进行游戏
  - 不存储IP地址或设备信息
- **数据清理**：
  - 定期清理非活跃用户数据
  - 设置数据过期时间（如24小时）
  - 避免数据无限累积

### 4. 文件组织
- **推荐结构**：
  ```
  index.html          # 主页面文件
  style.css           # 样式文件（可选，也可内嵌）
  script.js           # 脚本文件（可选，也可内嵌）
  assets/             # 资源文件夹
    ├── sounds/       # 音效文件
    └── images/       # 图片文件（如需要）
  ```
- **精简原则**：优先考虑将CSS和JS内嵌到HTML中，减少HTTP请求

### 5. 部署要求
- 代码托管：GitHub
- 部署平台：Vercel
- 域名：使用国内域名连接
- 静态文件部署，无需后端服务器

## 用户体验流程

1. 用户访问游戏页面
2. 输入用户名（验证唯一性）
3. 进入游戏主界面
4. 查看当前谜题
5. 输入答案并提交
6. 获得反馈（答对/答错）
7. 查看更新后的排行榜
8. 继续下一题或选择其他操作

## 扩展功能（可选）
- 谜题难度分级
- 用户答题历史记录
- 社交分享功能
- 节日主题切换
- 移动端优化

## 项目里程碑
1. 需求分析和设计（当前阶段）
2. 前端界面开发
3. 后端逻辑实现
4. 测试和优化
5. 部署上线

---
文档版本：v1.0
创建日期：2024年
最后更新：2024年